---
// Import the cart store
import { cart, clearCart, updateItemQuantity } from '../lib/cart-store';
const shopDomain = import.meta.env.PUBLIC_SHOPIFY_STORE_DOMAIN;
---

<div id="cart-drawer" class="cart-drawer" data-shop-domain={shopDomain}>
  <div class="cart-drawer-content">
    <div class="cart-header">
      <h2>Your Cart</h2>
      <button id="close-cart" class="close-cart-button" aria-label="Close cart">Ã—</button>
    </div>

    <div id="cart-container"></div>

    <div id="cart-summary-section" class="cart-summary" style="display: none;">
      <div id="cart-total" class="cart-total">
        <span class="label">Total:</span>
        <span class="amount">$0.00</span>
      </div>
      <div class="cart-actions">
        <button id="clear-cart" class="clear-cart-button">Clear Cart</button>
        <a id="checkout-link" href="#" class="checkout-button">Proceed to Checkout</a>
      </div>
    </div>
  </div>
</div>

<template id="cart-item-template">
  <li class="cart-item">
    <a class="cart-item-link-img">
      <img src="" alt="" />
    </a>
    <div class="item-details">
      <a class="cart-item-link-title">
        <p class="item-title"></p>
      </a>
      <p class="item-price"></p>
    </div>
    <div class="item-quantity">
      <label>Qty:</label>
      <input type="number" class="quantity-input" min="0" />
      <button type="button" class="remove-item-button" aria-label="Remove item">x</button>
    </div>
  </li>
</template>

<style>
  .cart-drawer {
    position: fixed;
    top: 0;
    right: -500px; /* Start off-screen */
    width: 100%;
    max-width: 500px;
    height: 100vh;
    background-color: #0e162a;
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.3);
    z-index: 1000;
    transition: right 0.3s ease-in-out;
    overflow-y: auto;
  }

  .cart-drawer.open {
    right: 0;
  }

  .cart-drawer-content {
    padding: 1.5rem;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .cart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .item-title {
    line-height: 1.2;
    margin-bottom: 8px;
  }
  .item-price {
    margin-bottom: 0;
    font-size: 14px;
    color: var(--accent)
  }


  .cart-header h2 {
    margin: 0;
    color: white;
    font-size: 18px;
  }

  .close-cart-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: white;
    cursor: pointer;
  }

  #cart-container {
    flex-grow: 1;
    overflow-y: auto;
  }

  .cart-items {
    list-style: none;
    padding: 0;
    margin: 0;
    border-top: 1px solid #333;
  }

  .cart-item {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    padding: 1.5rem 0;
    border-bottom: 1px solid #333;
    color: white;
  }

  .cart-item-link-img {
    display: block;
    min-width: 60px; /* Add min-width to ensure consistency */
    width: 60px;
  }

  .cart-item img {
    width: 100%;
    height: 60px;
    object-fit: cover;
    border-radius: 8px;
  }

  .item-details {
    flex: 1 1 auto; /* Use flex shorthand for better control */
    min-width: 0; /* Prevent overflow issues */
  }

  .item-quantity {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    min-width: 120px; /* Add min-width to ensure consistency */
    justify-content: flex-end; /* Align to the right */
  }

  .quantity-input {
    width: 50px;
    padding: 0.5rem;
    text-align: center;
    border-radius: 4px;
    border: 1px solid #ccc;
    color: white;
    background-color: #1a2234;
  }

  .empty-cart-message {
    text-align: center;
    font-size: 1.2rem;
    padding: 3rem 0;
    color: white;
  }

  .cart-summary {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 2px solid #555;
  }

  .cart-total {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 1.5rem;
    color: white;
    text-align: right;
  }

  .cart-total .label {
    color: #a0a0a0;
    font-weight: normal;
    margin-right: 1rem;
  }

  .cart-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
  }

  .checkout-button, .clear-cart-button {
    border: none;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    font-weight: bold;
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
  }

  .clear-cart-button {
    background-color: #555;
    color: white;
  }

  .checkout-button {
    background-color: var(--accent);
    color: white;
  }

  .remove-item-button {
    background-color: #e53e3e;
    color: white;
    border: none;
    font-size: 0.875rem;
    border-radius: 50%; /* More reliable than 9999px for ensuring a circle */
    cursor: pointer;
    width: 2rem;
    height: 2rem;
    min-width: 2rem; /* Prevent shrinking */
    min-height: 2rem; /* Prevent shrinking */
    padding: 0; /* Remove padding that could distort the shape */
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0; /* Prevent the button from shrinking in flex containers */
    aspect-ratio: 1/1; /* Enforce perfect square proportions */
    line-height: 1; /* Ensure text is centered properly */
    margin-left: 4px;
  }

  /* Overlay to close the cart when clicking outside */
  .cart-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 999;
    display: none;
  }

  .cart-overlay.open {
    display: block;
  }

  @media (max-width: 480px) {
    .cart-drawer {
      max-width: 100%;
    }
  }
</style>

<div id="cart-overlay" class="cart-overlay"></div>

<script>
  import { cart, clearCart, updateItemQuantity } from '../lib/cart-store';

  document.addEventListener('DOMContentLoaded', () => {
    try {
      const cartDrawer = document.getElementById('cart-drawer');
      const cartOverlay = document.getElementById('cart-overlay');
      const closeCartButton = document.getElementById('close-cart');
      const cartContainer = document.getElementById('cart-container');
      const itemTemplate = document.getElementById('cart-item-template');
      const summarySection = document.getElementById('cart-summary-section');
      const totalAmountEl = summarySection.querySelector('.amount');
      const clearCartButton = document.getElementById('clear-cart');
      const checkoutLink = document.getElementById('checkout-link');
      const shopDomain = cartDrawer.dataset.shopDomain;

    // Function to open the cart drawer
    window.openCartDrawer = function() {
      try {
        cartDrawer.classList.add('open');
        cartOverlay.classList.add('open');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
      } catch (error) {
        console.error('Error opening cart drawer:', error);
      }
    };

    // Function to close the cart drawer
    function closeCartDrawer() {
      try {
        cartDrawer.classList.remove('open');
        cartOverlay.classList.remove('open');
        document.body.style.overflow = ''; // Restore scrolling
      } catch (error) {
        console.error('Error closing cart drawer:', error);
      }
    }

    // Event listeners for opening/closing the cart
    closeCartButton.addEventListener('click', closeCartDrawer);
    cartOverlay.addEventListener('click', closeCartDrawer);

    // Render cart contents
    function renderCart(items) {
      try {
        cartContainer.innerHTML = '';
        let subtotal = 0;
        let checkoutItems = [];

      if (items.length === 0) {
        cartContainer.innerHTML = '<p class="empty-cart-message text-white">Your cart is empty.</p>';
        summarySection.style.display = 'none';
        return;
      }

      summarySection.style.display = 'block';
      const itemList = document.createElement('ul');
      itemList.className = 'cart-items';

      items.forEach(item => {
        const itemClone = itemTemplate.content.cloneNode(true);
        const imgLink = itemClone.querySelector('a.cart-item-link-img');
        const titleLink = itemClone.querySelector('a.cart-item-link-title');
        const img = itemClone.querySelector('img');
        const quantityInput = itemClone.querySelector('.quantity-input');
        const itemPageUrl = `/parts/${item.handle}`;

        imgLink.href = itemPageUrl;
        titleLink.href = itemPageUrl;
        img.src = item.image;
        img.alt = item.title;
        itemClone.querySelector('.item-title').textContent = item.title;
        itemClone.querySelector('.item-price').textContent = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: item.currency || 'USD'
        }).format(item.price);

        quantityInput.value = item.quantity;
        quantityInput.dataset.itemId = item.id;

        // Set the item ID for the remove button
        const removeButton = itemClone.querySelector('.remove-item-button');
        removeButton.dataset.itemId = item.id;

        itemList.appendChild(itemClone);

        subtotal += item.price * item.quantity;
        const variantIdNumber = item.id.replace('gid://shopify/ProductVariant/', '');
        checkoutItems.push(`${variantIdNumber}:${item.quantity}`);
      });

      cartContainer.appendChild(itemList);
      totalAmountEl.textContent = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: items[0]?.currency || 'USD'
      }).format(subtotal);

      if (shopDomain) {
        checkoutLink.href = `https://${shopDomain}/cart/${checkoutItems.join(',')}`;
      }
      } catch (error) {
        console.error('Error rendering cart:', error);
        cartContainer.innerHTML = '<p class="error-message">Error loading cart. Please try again.</p>';
      }
    }

    // Event listener for quantity changes
    cartContainer.addEventListener('input', event => {
      try {
        if (event.target.classList.contains('quantity-input')) {
          const itemId = event.target.dataset.itemId;
          const newQuantity = parseInt(event.target.value, 10);
          if (!isNaN(newQuantity)) {
            updateItemQuantity(itemId, newQuantity);
          }
        }
      } catch (error) {
        console.error('Error updating item quantity:', error);
      }
    });

    // Event listener for remove buttons
    cartContainer.addEventListener('click', event => {
      try {
        if (event.target.classList.contains('remove-item-button')) {
          const itemId = event.target.dataset.itemId;
          updateItemQuantity(itemId, 0); // Remove item by setting quantity to 0
        }
      } catch (error) {
        console.error('Error removing item from cart:', error);
      }
    });

    // Event listener for clear cart button
    clearCartButton.addEventListener('click', () => {
      try {
        clearCart();
      } catch (error) {
        console.error('Error clearing cart:', error);
      }
    });

    // Subscribe to cart changes
    cart.subscribe(renderCart);
    } catch (error) {
      console.error('Error initializing cart drawer:', error);
      // Could add user notification here
    }
  });
</script>
